- Generalization
  --------------
1) multi interface inheritance // no impl gets reused apart from static/default
2) single implementation inheritance (concrete inheritance)

// Java restricts implementation inheritance to single inheritance
// so that it avoids too much complexity and the "Diamond Problem"!

class Animal {
	protected Food favorite(){...};
}
class Pet extends Animal
class Feline extends Animal
class FelisCattus extends Pet,Animal // which favorite() method will inherit??

Promise/Contract: 
interface {
	eat(food);// "Can eat food"
}

class {
	eat(food)  {
	}
}

operateOn(base)
operateOn(subclass)

parent/base class

public class Person {
	private String name;
	protected String hairColor;
	
	public String getName() {
		return name;
	}
}

public class Friend extends Person {
	
	public Friend(String name, String hairColor, String favor) {
		super(name, hairColor);
		this.favor = favor;
	}
	
	@Override
	public String getName() {			// Overriding method
		return "modified " + name;		// NOT LESS ACCESSIBLE!
	}									// No new checked exceptions!
	// Same RETURN TYPE or assignment compatible object (sub-class)
	
	public String getName(String prefix) { // Overloading method
		return prefix + name;
	}
}

"Overloading method" // same method name, diff arg list
"Overriding method"  // same method name, same arg list


- Polymorphism
  ------------
"The ability to look to an object in ..multiple ways!"
"Object with multiple shapes or forms..!"

E.g:
1) Overloading
2) Generics
3) Operators
  
- Encapsulation
  -------------
1) "Data inaccessible from outside" // private member vars
2) "Select methods are accessible"  // getters (accessors) & setters (mutators)
3) "Liskov Substitution"

Pet: Cat, Dog, or whatever else Pet

- Terminology
  -----------
B extends A (implementation inheritance)

B "is an" A
B extends A
B is a derived class
B is derived from A
B is a child of A
B is a subclass of A

A is the parent of B
A is the baseclass of B
A is the superclass of B

B is an implementation of A interface (interface inheritance)

B implements A
B fulfils the contract of A
B fulfils the promise of A
B "is an" A
