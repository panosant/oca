- Objects and 8 Primitive Data Types
  ----------------------------------

8 primitive data types <-> 8 wrapper classes:
boolean Boolean
char    Character
byte    Byte
short   Short
int     Integer
long    Long
float   Float
double  Double

Integer Literals:       Double Literals:	Char Literals:
decimal	 	..			float	..F			char 									'..'
octal 		0..			double	..D			hex value of the UNICODE code point 	'\uXXXX'
hex   		0x..							backspace								'\b'
binary 		0b..							tab										'\t'
long   		...L							line feed								'\n'
delimter 	.._..							carriage return							'\r'
											double quote							'\"'
											single quote							'\''
											backslash								'\\'

- Variable Declaration and Initialization
  ----------------------------------------

a) member variables, instance variables (in the object's scope)
b) stack variables (in the method's scope)

int x=100, y=200, z=x+y;

- Java PASSES the arguments BY VALUE (regardless if the argument is a primitive data type or the reference of an object) 
  ----------------------------------

Primitive args: Contain the actual value
Reference args: Contain the reference (pointer) of the object with the value in the memory  

- Object Lifecycle
  ----------------

a) Creation
b) Dereference by re-assignment
c) GC							// when object gets out of scope (unreachable), gets eligible to be collected by the GC upon next GC execution

- Wrapper classes for primitive data types
  ----------------------------------------

List<int> invalidList = new ArrayList<int>(); 		// invalid!
List<Integer> validList = new ArrayList<Integer>(); // valid

Wrapper Objects support many methods associated with them: 
a) static methods
b) instance methods